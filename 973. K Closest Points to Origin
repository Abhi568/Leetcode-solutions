# from collections import defaultdict
from heapq import heapify, heappop, heappush

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        #max heap
        # nlogk
        l=[]
        for i in range(k):
            heappush(l,[-1*((points[i][0]**2)+(points[i][1]**2)),points[i]])
        heapify(l)
        for i in range(k,len(points)):
            if l[0][0]<-1*((points[i][0]**2)+(points[i][1]**2)):
                heappop(l)
                heappush(l,[-1*(points[i][0]**2+points[i][1]**2),points[i]])
        res=[]
        c=-1
        print(l)
        for i in range(k):
            res.append(l[c][1])
            c-=1
        return res
    
        # min heap
        # # O(Nlogn)
        # l=[]
        # j=0
        # while(j<len(points)):
        #     # print(points[j])
        #     heappush(l,[ ((points[j][0]**2)+(points[j][1]**2)), points[j]])
        #     j+=1
        #     # print(l,j)
        # heapify(l)
        # c=0;
        # l1=[]
        # #print(l)
        # for i in range(k):
        #     l1.append(heappop(l)[1])
        #     c=c+1
        # return l1


        # d=defaultdict(list)
        # for i in range(len(points)):
        #     dis=math.sqrt((points[i][0]**2)+(points[i][1]**2))
        #     if dis in d:
        #         d[dis].append(points[i])
        #     else:
        #         d[dis]=[points[i]]
        # # print(d)
        # list1=sorted(d,key=lambda x:x)
        # # print(list1)
        # count=0
        # returnList=[]
        # for key in list1:
        #     returnList.extend(d[key])
        #     # print(returnList)
        #     if len(returnList)>=k:
        #         return returnList[:k]
        
