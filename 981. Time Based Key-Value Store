class TimeMap:
    '''
    ["TimeMap", "set", "get", "get", "set", "get", "get"]
    [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
    d = {"foo":[["bar",1],["bar2",4]]}
    get  = ["foo",10]
    
    binarySearch
    l=0 
    r= len(d[key])-1 = 1
    while(l<=r)-> (2<=1)
    m = (0+1)//2 = 0  -> 2//2 = 1 - >  0+2//2 =1
    timestamp == d[key][m][-1] return
    timestamp < d[key][m][-1] r = m-1 
    timestamp > d[key][m][-1] ,index = l, l =m+1
                               index = 0 , l =1
                               index = 1   , l=2
    
    return d[key][index][0]
    '''
    
    def __init__(self):
        self.d = {}

    def set(self, key: str, value: str, timestamp: int) -> None:
        if key not in self.d:
            self.d[key] = [[value,timestamp]]
        else:
            self.d[key].append([value,timestamp])
            
            

    def get(self, key: str, timestamp: int) -> str:
        if key not in self.d:
            return ""
        else:
            l = 0
            r = len(self.d[key])-1
            index = -1
            
            while(l<=r):
                mid = (l+r)//2
                if timestamp == self.d[key][mid][1]:
                    index = mid
                    break
                elif timestamp < self.d[key][mid][1]:
                    r = mid -1
                else:
                    index = l
                    l = mid +1
            if index == -1:
                return ""
            return self.d[key][index][0]

# Your TimeMap object will be instantiated and called as such:
# obj = TimeMap()
# obj.set(key,value,timestamp)
# param_2 = obj.get(key,timestamp)
