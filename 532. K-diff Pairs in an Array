O(NLogN) TC and O(N) SC

class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        nums.sort()
        count=0
        setn=set()
        i,j=0,0
        while(j<len(nums)):
            if i==j:
                j+=1
            elif nums[j]-nums[i]==k and (nums[i],nums[j]) not in setn:
                count+=1
                setn.add((nums[i],nums[j]))
                i+=1
                j+=1
            elif nums[j]-nums[i]<k:
                j+=1
            else:
                i+=1
        return count
    # [1,1,3,4,5] k=2
    # [1,2,3,4,1,2,3,4,5,1,2,3,5,6,7,8]
    # [1,1,1,2,2,2,3,3,3,4,4,5,6,6,7,8]


O(N) TC and O(N) SC

from collections import Counter
class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        d={}
        d=Counter(nums)
        s=set()
        count=0
        for i in nums:
            if i<k:
                if i+k in d and ((k+i,i) not in s or (i,k+i) not in s):
                    if i+k==i: 
                        if d[i+k]>1:
                            s.add((i,i))
                            count+=1
                    else:
                        s.add((k+i,i))
                        s.add((i,k+i))
                        count+=1
                
            else:
                if i-k in d and  ((i-k,i) not in s or (i,i-k) not in s):
                    if i-k==i: 
                        if d[i-k]>1:
                            s.add((i,i))
                            count+=1
                    else:
                        s.add((i-k,i))
                        s.add((i,i-k))
                        count+=1
        # print(s)
        return count
